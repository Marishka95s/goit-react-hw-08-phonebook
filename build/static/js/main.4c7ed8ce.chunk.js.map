{"version":3,"sources":["Components/Filter/Filter.module.css","redux/phonebook/contacts-selectors.js","redux/phonebook/contacts-actions.js","redux/phonebook/contacts-operations.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","redux/phonebook/contacts-reducer.js","redux/store.js","index.js","Components/ContactForm/ContactForm.module.css","Components/ContactList/ContactList.module.css"],"names":["module","exports","getFilter","state","contacts","filter","getTotalContacts","items","length","getError","error","getLoadingStatus","loading","getFiltredContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","contactsActions","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","updateContactRequest","updateContactSuccess","updateContactError","changeFilter","axios","defaults","baseURL","actions","ContactForm","dispatch","useDispatch","useSelector","useState","setName","number","setNumber","handleChange","event","target","value","className","styles","form","method","onSubmit","preventDefault","some","alert","post","then","data","catch","addContact","label","input","type","pattern","title","required","onChange","btn","ContactList","useEffect","get","list","map","id","item","onClick","contactId","delete","Filter","e","App","totalContacts","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c7ed8ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__1nvwZ\",\"btn\":\"Filter_btn__2FIAR\"};","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const getTotalContacts = state => state.contacts.items.length;\r\nexport const getError = state => state.contacts.error;\r\nexport const getLoadingStatus = state => state.contacts.loading;\r\n\r\nexport const getFiltredContacts = createSelector(\r\n    [getContacts, getFilter],\r\n    (contacts, filter) => {\r\n      const normalizedFilter = filter.toLowerCase();  \r\n      return contacts.filter(contact => contact.name.includes(normalizedFilter),\r\n      );\r\n    },\r\n  );\r\n\r\n// export const getFiltredContacts = state => {\r\n//     const contacts = getContacts(state);\r\n//     const filter = getFilter(state);\r\n//     const normalizedFilter = filter.toLowerCase();\r\n   \r\n//     return contacts.filter(contact => contact.name.includes(normalizedFilter))};\r\n\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nconst fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nconst fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nconst addContactRequest = createAction('contacts/addContactRequest');\r\nconst addContactSuccess = createAction('contacts/addContactSuccess');\r\nconst addContactError = createAction('contacts/addContactError');\r\n\r\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nconst deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nconst updateContactRequest = createAction('contacts/updateContactRequest');\r\nconst updateContactSuccess = createAction('contacts/updateContactSuccess');\r\nconst updateContactError = createAction('contacts/updateContactError');\r\n\r\nconst changeFilter = createAction('contscts/changeFilter');\r\n\r\nconst contactsActions = {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest, addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest, deleteContactSuccess,\r\n  deleteContactError,\r\n  updateContactRequest,\r\n  updateContactSuccess,\r\n  updateContactError,\r\n  changeFilter\r\n  };\r\n\r\nexport default contactsActions;","import axios from 'axios';\r\nimport actions from './contacts-actions';\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst { fetchContactRequest, fetchContactSuccess, fetchContactError, addContactRequest, addContactSuccess, addContactError, deleteContactRequest, deleteContactSuccess, deleteContactError, updateContactRequest, updateContactSuccess, updateContactError } = actions;\r\n\r\nexport const fetchContact = () => dispatch => {\r\n    dispatch(fetchContactRequest());\r\n\r\n    axios.get('/contacts').then(({ data }) => dispatch(fetchContactSuccess(data))).catch(error => dispatch(fetchContactError(error)));\r\n};\r\n\r\nexport const addContact = (contacts, name, number) => dispatch => {\r\n    // const isInContacts = contacts.some(contact => contact.name === name);\r\n    //     if (isInContacts) { \r\n    //         let replaceAgreement = window.confirm(`${name} is already in contacts. Replace ${name} number?`);\r\n\r\n    //         if (!replaceAgreement) {\r\n    //             const update = { number };\r\n    //             dispatch(updateContactRequest());\r\n\r\n    //             axios\r\n    //             .patch(`/contacts/${name}`, update)\r\n    //             .then(({ data }) => dispatch(updateContactSuccess(data)))\r\n    //             .catch(error => dispatch(updateContactError(error)));\r\n    //         }\r\n    const isInContacts = contacts.some(contact => contact.name === name);\r\n        if (isInContacts) { \r\n            alert(`${name} is already in contacts`);\r\n            return;\r\n        }    \r\n    const contact = {\r\n        name, \r\n        number\r\n    };\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    axios.post('/contacts', contact).then(({ data }) => dispatch(addContactSuccess(data))).catch(error => dispatch(addContactError(error)));\r\n// }\r\n};\r\n\r\nexport const deleteContact = contactId => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    axios.delete(`/contacts/${contactId}`).then(() => dispatch(deleteContactSuccess(contactId))).catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nexport const updateContact = (contactId, number) => dispatch => {\r\n    const update = { number };\r\n    dispatch(updateContactRequest());\r\n\r\n    axios.patch(`/contacts/${contactId}`, update).then(({ data }) => dispatch(updateContactSuccess(data))).catch(error => dispatch(updateContactError(error)));\r\n};\r\n\r\n// const operations = { fetchContact, addContact, deleteContact, updateContact };\r\n// export default operations;\r\n","import React, { useState } from 'react';\r\n// import useLocalStorage from '../../hooks/useLocalStorage';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector  } from 'react-redux';\r\nimport { getFiltredContacts } from '../../redux/phonebook/contacts-selectors';\r\nimport { addContact } from '../../redux/phonebook/contacts-operations';\r\nimport styles from './ContactForm.module.css';\r\n\r\nexport default function ContactForm() {\r\n    const dispatch = useDispatch();\r\n    const contacts = useSelector(getFiltredContacts);\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');  \r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        dispatch(addContact(contacts, name, number));\r\n        setName('');\r\n        setNumber('');\r\n    }\r\n\r\n    return(\r\n        <form className={styles.form} method=\"post\" onSubmit={handleSubmit}>\r\n            <label className={styles.label}>Name: \r\n            <input className={styles.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-ЯІіЇїҐґ]+(([' -][a-zA-Zа-яА-ЯІіЇїҐґ ])?[a-zA-Zа-яА-ЯІіЇїҐґ]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={handleChange}\r\n            value={name}\r\n          />\r\n            </label>\r\n            <label className={styles.label}>Number: \r\n                <input type=\"tel\" name=\"number\"\r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\" \r\n                className={styles.input} value={number} onChange={handleChange} required />\r\n            </label>\r\n            <button type=\"submit\" \r\n            className={styles.btn}>\r\n                Add contact\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\nContactForm.propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.number,\r\n};\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getFiltredContacts, getError, getLoadingStatus } from '../../redux/phonebook/contacts-selectors';\r\nimport { fetchContact, deleteContact } from '../../redux/phonebook/contacts-operations';\r\nimport styles from './ContactList.module.css';\r\nimport { useEffect } from 'react';\r\n\r\nexport default function ContactList() { \r\n    const error = useSelector(getError);\r\n    const loading = useSelector(getLoadingStatus);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(fetchContact());\r\n    }, [dispatch]);\r\n    const contacts = useSelector(getFiltredContacts);     \r\n\r\n    return(\r\n    <>\r\n    {loading && <h2 className={styles.loading}>Loading...</h2>}\r\n    {error && <h2 className={styles.error}>{error}</h2>}\r\n    <ul className={styles.list}>\r\n        {contacts.map( ({ id, name, number }) => (\r\n            <li key={id} className={styles.item}>\r\n                <p className={styles.name}>{name}: <span>{number}</span></p>\r\n                <button type=\"button\" className={styles.btn} onClick={() => dispatch(deleteContact(id))}>Delete</button>\r\n            </li>\r\n        ) )\r\n        }\r\n    </ul>\r\n    </>\r\n)};\r\nContactList.propTypes = {\r\n    id: PropTypes.any,\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getFilter } from '../../redux/phonebook/contacts-selectors';\r\nimport changeFilter from '../../redux/phonebook/contacts-actions';\r\nimport styles from './Filter.module.css';\r\n\r\nexport default function Filter() {\r\n    const value = useSelector(getFilter);\r\n    const dispatch = useDispatch();\r\n\r\n    return(\r\n    <label className={styles.label}>\r\n        Find contacts by name\r\n        <input className={styles.input} type=\"text\" value={value} onChange={e => dispatch(changeFilter(e.target.value))}/>\r\n    </label>\r\n)};\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './App.css';\r\nimport { useSelector } from 'react-redux';\r\nimport ContactForm from './Components/ContactForm';\r\nimport ContactList from './Components/ContactList';\r\nimport Filter from './Components/Filter';\r\nimport { getTotalContacts } from './redux/phonebook/contacts-selectors'\r\n\r\nexport default function App() {\r\n  const totalContacts = useSelector(getTotalContacts);\r\n\r\n   return (\r\n    <div className=\"App\">\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n\r\n      <h2>Contacts (total: {totalContacts}) </h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>        \r\n  ); \r\n}\r\n\r\nApp.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape(\r\n      {\r\n        id: PropTypes.any.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n      })\r\n  ),\r\n  totalContacts: PropTypes.number,\r\n};\r\n\r\n\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from './contacts-actions';\r\n\r\nconst { fetchContactRequest, fetchContactSuccess, fetchContactError, addContactRequest, addContactSuccess, addContactError, deleteContactRequest, deleteContactSuccess, deleteContactError, updateContactRequest, updateContactSuccess, updateContactError, changeFilter } = actions;\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactSuccess]: (_, { payload }) => payload,\r\n\r\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n\r\n    [deleteContactSuccess]: (state, { payload }) => state.filter(contact => contact.id !== payload),\r\n    \r\n    [updateContactSuccess]: (state, { payload }) => state.map(contact => contact.name === payload.name ? { ...contact, number: payload.number } : contact )\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactRequest]: () => true,\r\n    [fetchContactSuccess]: () => false,\r\n    [fetchContactError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n    [updateContactRequest]: () => true,\r\n    [updateContactSuccess]: () => false,\r\n    [updateContactError]: () => false,\r\n})\r\n           \r\nconst filter = createReducer('', {\r\n    [changeFilter]: (_, { payload }) => payload\r\n});\r\n\r\nconst error = createReducer(null, {\r\n    [fetchContactError]: (_, { payload }) => payload,\r\n    [addContactError]: (_, { payload }) => payload,\r\n    [deleteContactError]: (_, { payload }) => payload,\r\n    [updateContactError]: (_, { payload }) => payload,\r\n    [fetchContactRequest]: () => null,\r\n    [addContactRequest]: () => null,\r\n    [deleteContactRequest]: () => null,\r\n    [updateContactRequest]: () => null,\r\n  });\r\n\r\nexport default combineReducers({ items, loading, filter, error });","// import { combineReducers, createStore } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport contactsReducer from './phonebook/contacts-reducer';\r\nimport { logger } from 'redux-logger';\r\nimport {\r\n    // persistStore, \r\n    // persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER, \r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }), logger, \r\n];\r\n\r\n// const contactsPersistConfig = {\r\n//     key: 'contacts',\r\n//     storage,\r\n//     blacklist: ['filter'],\r\n// };\r\n// const rootReducer = combineReducers({\r\n//     contacts: contactsReducer,\r\n// });\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReducer, \r\n        middleware,    \r\n        // devTools: true,\r\n        devTools: process.env.NODE_ENV === 'development',\r\n}});\r\n// const persistor = persistStore(store);\r\n\r\n// const newstore = { store, persistor };\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={<h3>Загружаем локальное хранилище</h3>} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__DtwC1\",\"label\":\"ContactForm_label__364Wz\",\"input\":\"ContactForm_input__12S31\",\"btn\":\"ContactForm_btn__Q4XF8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1ecuI\",\"item\":\"ContactList_item__1tDqZ\",\"name\":\"ContactList_name__1s29u\",\"btn\":\"ContactList_btn__ji1Rq\"};"],"sourceRoot":""}